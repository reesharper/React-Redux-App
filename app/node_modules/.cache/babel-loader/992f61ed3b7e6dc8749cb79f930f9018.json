{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\web36\\\\React-Redux-App\\\\app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchJokes } from './actions/actions';\n\nconst App = props => {\n  _s();\n\n  useEffect(() => {\n    props.fetchJokes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Joke Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), props.isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading jokes...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 26\n    }, this) : null, props.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: props.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 22\n    }, this) : null, props.jokes.map(joke => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"joke\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: joke.setup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\" \", joke.punchline, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    isLoading: state.isLoading,\n    jokes: state.jokeData,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchJokes\n})(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["F:/web36/React-Redux-App/app/src/App.js"],"names":["React","useEffect","connect","fetchJokes","App","props","isLoading","error","color","jokes","map","joke","setup","punchline","mapStateToProps","state","jokeData"],"mappings":";;;;;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AAAA;;AAErBJ,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,KAAK,CAACF,UAAN;AACD,GAFQ,EAEN,EAFM,CAAT;AAKA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAGGE,KAAK,CAACC,SAAN,gBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAlB,GAA4C,IAH/C,EAIGD,KAAK,CAACE,KAAN,gBAAc;AAAG,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAV;AAAA,gBAA6BH,KAAK,CAACE;AAAnC;AAAA;AAAA;AAAA;AAAA,YAAd,GAA8D,IAJjE,EAKGF,KAAK,CAACI,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,iBACf;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAA,kBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,wBAAMD,IAAI,CAACE,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,CALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CArBD;;GAAMT,G;;KAAAA,G;;AAuBN,MAAMU,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLT,IAAAA,SAAS,EAAES,KAAK,CAACT,SADZ;AAELG,IAAAA,KAAK,EAAEM,KAAK,CAACC,QAFR;AAGLT,IAAAA,KAAK,EAAEQ,KAAK,CAACR;AAHR,GAAP;AAKD,CAND;;AAQA,eAAeL,OAAO,CAACY,eAAD,EAAkB;AAAEX,EAAAA;AAAF,CAAlB,CAAP,CAAyCC,GAAzC,CAAf","sourcesContent":["\nimport './App.css';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchJokes } from './actions/actions'\n\nconst App = (props) => {\n\n  useEffect(() => {\n    props.fetchJokes();\n  }, []);\n\n\n  return (\n    <div>\n      <h2>Joke Generator</h2>\n      \n      {props.isLoading ? <p>Loading jokes...</p> : null}\n      {props.error ? <p style={{ color: \"red\" }}>{props.error}</p> : null}\n      {props.jokes.map((joke) => (\n        <div className='joke'>\n          <h3>{joke.setup}</h3>\n          <h4> {joke.punchline} </h4>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isLoading: state.isLoading,\n    jokes: state.jokeData,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, { fetchJokes })(App);\n"]},"metadata":{},"sourceType":"module"}